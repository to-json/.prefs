(ns l-system-fun.turtle
  (:require [quil.core :as q]))

;; Functions for drawing with the turtle

;; A nifty turtle constructor
(defn turtle [x y angle pen-state]
  {:x x :y y :angle angle :pen pen-state})

;; Calculate the next place for the turtle to go, if it will be moving
(defn- next-position [x y angle distance]
  [(+ x (* (Math/cos (Math/toRadians angle)) distance))
   (+ y (* (Math/sin (Math/toRadians angle)) distance))])

;; Move the turtle. I'm not sure if I like this being written this way as
;; the turtle is dependent on quil
(defn move-turtle [a-turtle distance draw-fn]
  (let [current [(:x a-turtle) (:y a-turtle)]
        angle (:angle a-turtle)
        pen (:pen a-turtle)
        next (apply next-position (flatten [current angle distance]))]
    (do
      (if pen (apply draw-fn (flatten [current next])))
      (apply turtle (flatten [next angle pen])))))

;; Returns a rotated turtle
(defn rotate-turtle [current-turtle angle]
  (turtle (:x current-turtle)
          (:y current-turtle)
          (mod (+ (:angle current-turtle) angle) 360)
          (:pen current-turtle)))
