" nocompatible because duh.
set nocompatible

"===============================================================================
"************************************* VUNDLE **********************************
"===============================================================================

" Disable filetypes during bundle load
filetype off
" add vundle to vim runtime path
set rtp+=~/.vim/bundle/Vundle.vim
" call vundle
call vundle#begin()

" Because vundle will DELETE ITSELF on :BundleClean if this isn't here.
Plugin 'gmarik/Vundle.vim'

" i have way too many plugins. #TODO trim this crap

Plugin 'altercation/vim-colors-solarized'
Plugin 'bling/vim-airline'
Plugin 'davidhalter/jedi-vim'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'craigemery/vim-autotag'
Plugin 'ervandew/supertab'
Plugin 'godlygeek/tabular'
Plugin 'guns/vim-clojure-static'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'jpalardy/vim-slime'
Plugin 'kana/vim-textobj-user'
Plugin 'kchmck/vim-coffee-script'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'klen/python-mode'
Plugin 'kovisoft/slimv'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'majutsushi/tagbar'
Plugin 'msanders/snipmate.vim'
"Plugin 'othree/vim-autocomplpop'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'Raimondi/delimitMate'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'Shougo/neocomplete.vim'
Plugin 'Shougo/neomru.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/vimshell.vim'
Plugin 'Shougo/unite.vim'
Plugin 'terryma/vim-expand-region'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-classpath'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-rvm'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
"Plugin 'tsaleh/vim-matchit'
Plugin 't9md/vim-ruby-xmpfilter'
Plugin 'ujihisa/neco-ghc'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-ruby/vim-ruby'
Plugin 'wting/rust.vim'
Plugin 'yuratomo/w3m.vim'
"Plugin 'FuzzyFinder'
Plugin 'L9'

call vundle#end()     
" re-enable filetypes
filetype plugin indent on

"===============================================================================
"************************************* 'SET's **********************************
"===============================================================================

" Note: I have vim-sensible so a ton of this is probably redundant.

" Basics
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab             " use spaces instead of tabs
set incsearch             " highlight as you type your search.
set t_Co=256              " enable 256-color mode.
set number                " show line numbers
set ruler                 " Always show info along bottom.
set nowrap                " no word wrap
set hidden                " hide unsaved buffers
set hlsearch              " highlight search results

" Mouse mode because I am weak
set mouse=a

" Solarized colors best colors
" Dependency: altercation/vim-colors-solarized
syntax enable
set background=dark

silent! colorscheme solarized

" I had a serious issue with backspacing and this fixed it.
set backspace=indent,eol,start

" include additional files while searching for ctags
set tags+=.gemtags
set tags+=.tags

"===============================================================================
"************************************* 'LET's **********************************
"===============================================================================

" Airline because powerline exploded
" Dependency: bling/vim-airline

let g:airline_powerline_fonts = 1

" Vim slime to use tmux instead of screen
" Dependency: jpalardy/vim-slime
let g:slime_target = "tmux"

" Better ruby completion
" Dependency: t9md/vim-ruby-xmpfilter
" let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
" let g:rubycomplete_rails = 1
let g:rubycomplete_use_bundler = 1
let g:rubycomplete_load_gemfile = 1

" configure browser for haskell_doc.vim
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"

" python-mode defaults to rope, prefer jedi
let g:pymode_rope = 0

" set slimv target for scheme
let g:slimv_swank_cmd = "!tmux split-window -hd -t 0 'scheme --eval \"(let loop () (start-swank) (loop))\"'"

" Syntastic enable rubylint and rubocop
let g:syntastic_ruby_checkers = [ 'rubocop', 'mri']

" Neocomplete is a little agressive, lets try tab completion.
let g:neocomplete#disable_auto_complete = 1

" Unite grep should use ag so I can stop using ag.vim
let g:Unite_source_grep_command = 'ag' 
let g:Unite_source_grep_default_opts = '- nogroup - nocolor - column' 
let g:Unite_source_grep_recursive_opt ='' 

"===============================================================================
"************************************* OTHER ***********************************
"===============================================================================

" because iTerm fullscreen and vim don't get along
if has('mouse_sgr')
      set ttymouse=sgr
endif
" Automatic rc reloading
augroup myvimrc
  au!
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | 
        \ if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Syntax highlighting basics
syntax on

" Better ruby completion
" Dependency: t9md/vim-ruby-xmpfilter
autocmd FileType ruby set omnifunc=rubycomplete#Complete

" Better haskell completion
autocmd FileType haskell set omnifunc=necoghc#omnifunc

" Haskell -> ghc
au Bufenter *.hs compiler ghc

autocmd FileType scheme au InsertEnter * :set isk+=- 
autocmd FileType scheme au InsertLeave * :set isk-=- 

" haskell path
"let $PATH = $PATH . ':' . expand("~/.cabal/bin")

" better rust highlighting
au BufNewFile,BufRead *.rs set filetype=rust

"===============================================================================
"************************************* MVIM ************************************
"===============================================================================

" Commented out because i don't mvim much anymore.
" Bird eye view (set font size to 2px in mvim)

" map <Leader>- :set guifont=Inconsolata:h0<CR>
" map <Leader>= :set guifont=Inconsolata:h14<CR>

" scrollbars in mvim break MY IMMERSION
" set guioptions-=r
" set guioptions-=L

" Inconsolata font best font
" set guifont=Inconsolata:h14

"===============================================================================
"************************************* MAPPINGS ********************************
"===============================================================================

" Buffer rotation with control [shift] tab
" Dependency: minibufexpl.vim
"noremap <C-TAB>   :MBEbn<CR>
"noremap <C-S-TAB> :MBEbp<CR>

" Quick escape binding
imap jj <Esc>

" Toggle nerdtree
" Dependency: scrooloose/nerdtree
map <F2> :NERDTreeToggle<CR>
map <F8> :TagbarToggle<CR>
"===============================================================================
"************************************* LEADERS *********************************
"===============================================================================

" Fugitive status
" Dependency: tpope/vim-fugitive
nnoremap <leader>gs :Gstatus<CR>

" Leader q for buffer deletion
nnoremap <leader>q :bd<CR>
nnoremap <leader>q! :bd!<CR>

" Leader n for clearing search highlights
nnoremap <leader>n :noh<CR>

" Leader f fuzzy file find
" Dependency: FuzzyFinder
"nnoremap <leader>f :FufFile<CR>

" Leader b fuzzy buffer find
" Dependency: Shougo/unite.vim
nnoremap <Leader>b :Unite -start-insert -buffer-name=buffers -winheight=10 buffer<cr>


" Leader m fuzzy recent file find
nnoremap <silent> <Leader>m :Unite -start-insert -buffer-name=recent -winheight=10 file_mru<cr>

" Search project files with leader g
" Dependency: Shougo/unite.vim
nnoremap <Leader>g :Unite grep:.<cr>

" leader f CtrlP style search
" Dependency: Shougo/unite.vim
if exists('unite')
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  call unite#filters#sorter_default#use(['sorter_rank'])
  call unite#custom#source('file_rec/async','sorters','sorter_rank')
  nnoremap <silent> <Leader>f :Unite -start-insert -buffer-name=files -winheight=10 file_rec/async<cr>
endif

" Vim rspec because holy shit awesome
autocmd FileType ruby " Dependency: thoughtbot/vim-rspec
autocmd FileType ruby map <Leader>c :call RunCurrentSpecFile()<CR>
autocmd FileType ruby map <Leader>s :call RunNearestSpec()<CR>
autocmd FileType ruby map <Leader>l :call RunLastSpec()<CR>
autocmd FileType ruby map <Leader>a :call RunAllSpecs()<CR>


" Inline execution through xmpfilter
" Dependency: t9md/vim-ruby-xmpfilter
" Execute marked lines
autocmd FileType ruby nmap <buffer> <Leader>m <Plug>(xmpfilter-run)
autocmd FileType ruby xmap <buffer> <Leader>m <Plug>(xmpfilter-run)
autocmd FileType ruby imap <buffer> <Leader>m <Plug>(xmpfilter-run)
" Add mark
autocmd FileType ruby nmap <buffer> <Leader>r <Plug>(xmpfilter-mark)
autocmd FileType ruby xmap <buffer> <Leader>r <Plug>(xmpfilter-mark)
autocmd FileType ruby imap <buffer> <Leader>r <Plug>(xmpfilter-mark)

autocmd FileType haskell nmap <Leader>t :GhcModType<CR>

hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
nnoremap <Leader>h :set cursorline! cursorcolumn!<CR>


" ___WEIRDSHIT____

" Preserve current state during wrapped command!

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" strip trailing whitespace.
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" reindent the current file.
nmap _= :call Preserve("normal gg=G")<CR>
